/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) 
    {
        
        if  (root)
        {
            if  (!root->left && !root->right)
            {
                return true;
            }
            else if ((bool)root->left ^ (bool)root->right)
            {
                return false;
            }
        }
        else
        {
           return true;
        }
        TreeNode* node1 = nullptr, *node2 = nullptr;
        std::stack<TreeNode*> s1;
        std::stack<TreeNode*> s2;
        s1.push(root->left);
        s2.push(root->right);
        while(!s1.empty() && !s2.empty())
        {   
            auto node1 = s1.top();
            s1.pop();
            auto node2 = s2.top();
            s2.pop();

            if  (node1->val != node2->val || ((bool)node1->left ^ (bool)node2->right) 
                                            || ((bool)node1->right ^ (bool)node2->left))
            {
                return false;
            }

            if  (node1->left && node2->right)
            {
                s1.push(node1->left);
                s2.push(node2->right);
            }
            if  (node1->right && node2->left)             
            {
                s1.push(node1->right);
                s2.push(node2->left);
            }
        }
        return s1.empty() ^ s2.empty() ? false : true;
    }
    
};
