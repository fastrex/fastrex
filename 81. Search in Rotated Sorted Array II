class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int lo = 0, mid, halfmid;
        int hi = nums.size() - 1;

        while (lo + 1 < hi)
        {
            mid = lo + (hi - lo) / 2;            
            if (nums[lo] == nums[mid] && nums[mid] == nums[hi] && nums[mid] == nums[hi - 1])
            {
                ++lo;
                hi -= 2;
            }
            else if  (nums[lo] <= nums[mid])
            {
                if (check(nums[lo], target, nums[mid]))
                {
                    hi = mid;
                }
                else
                {
                    lo = mid;
                }
            }
            else
            {
                if (check(nums[mid], target, nums[hi]))
                {
                    lo = mid;
                }
                else
                {
                    hi = mid;
                }
            }
        }
        return target == nums[lo] || target == nums[hi];
    }

    bool check (const double& left,const double& target, const double& right)
    {
        return left <= target && target <= right;
    }
};
