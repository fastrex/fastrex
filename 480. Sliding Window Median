class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {

        vector<double> res;
        vector<int> med;
        int midIndex = k / 2;
        int prevMidIndex = midIndex - 1;
        bool even = !(k % 2);

        for (int i = 0; i < k; i++)
            med.insert(lower_bound(med.begin(), med.end(), nums[i]), nums[i]); // fill // order
        if (even)
            res.push_back((double)(med[midIndex] + med[prevMidIndex]) / 2);
        else
            res.push_back((double)med[midIndex]);


        for (int i = k; i < nums.size(); i++)
        //for (int i = k; i < nums.size(); i++)
        {
            med.erase(lower_bound(med.begin(), med.end(), nums[i - k]));
            med.insert(lower_bound(med.begin(), med.end(), nums[i]), nums[i]);
            if (even)
                res.push_back((double)(med[midIndex] + med[prevMidIndex]) / 2);
            else
                res.push_back((double)med[midIndex]);
        }
        return res;
    }
};
